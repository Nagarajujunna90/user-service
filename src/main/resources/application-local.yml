server:
  port: 8082

#eureka:
#  client:
#    register-with-eureka: true
#    fetch-registry: true
#  instance:
#    hostname: localhost
#logging:
#  level:
#    root: WARN
#    org.springframework: INFO
#    org.apache.kafka: DEBUG

spring:
  application:
    name: user-service
  datasource:
    url: jdbc:mysql://localhost:3306/e-user?useSSL=false&allowPublicKeyRetrieval=true
    password: root
    username: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
    open-in-view: false

  codec:
    max-in-memory-size: 10MB
#Kafka properties started here
  kafka:
    autoStartup: false
    ssl:
      trust-store-type: SSL
      key-store-key:
      key-store-password:
      key-store-location:
    security:
      protocol: SASL_SSL
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      bootstrap-servers: localhost:9092
      group-id: nagaraju
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: false
    topics:
       input: createUser
  config:
    import: optional:configserver:http://localhost:8888
  main:
    web-application-type: reactive
      #The above properties represent that only 2 requests are allowed in 5 seconds duration. Also,
      #there is no timeout duration which means after completion of 5 seconds, the user can send request again.

  cloud:
    circuitbreaker:
      bulkhead:
        resilience4j:
          enabled: false
resilience4j.circuitbreaker:
  instances:
    backendA:
      registerHealthIndicator: true
      slidingWindowSize: 100
    backendB:
      registerHealthIndicator: true
      slidingWindowSize: 10
      permittedNumberOfCallsInHalfOpenState: 3
      slidingWindowType: TIME_BASED
      #recordFailurePredicate: io.github.robwin.exception.RecordFailurePredicate

resilience4j.timelimiter:
  instances:
    backendA:
      timeoutDuration: 2s
      cancelRunningFuture: true
    backendB:
      timeoutDuration: 1s
      cancelRunningFuture: false


resilience4j.bulkhead:
    instances:
      getMessageBH:
        max-concurrent-calls: 2
        max-wait-duration: 0
      #bulkheadAspectOrder : 1

#resilience4j.circuitbreaker:
#    instances:
#      GetInvoiceCB:
#        automatic-transition-from-open-to-half-open-enabled: true
#        failure-rate-threshold: 80
#        minimum-number-of-calls: 5
#        permitted-number-of-calls-in-half-open-state: 4
#        sliding-window-size: 10
#        sliding-window-type: COUNT_BASED
#        wait-duration-in-open-state: 10s
#      #circuitBreakerAspectOrder: 4
resilience4j.ratelimiter:
    instances:
      getMessageRateLimit:
        limit-for-period: 2
        limit-refresh-period: 10s
        timeout-duration: 0
      #rateLimiterAspectOrder: 3
resilience4j.retry:
    instances:
      getInvoiceRetry:
        enable-exponential-backoff: true
        max-attempts: 5
        retry-exceptions: org.springframework.web.client.ResourceAccessException
        wait-duration: 2s
      #retryAspectOrder: 5
#resilience4j.timelimiter:
#    instances:
#      getMessageTL:
#        cancel-running-future: false
#        timeout-duration: 1s
#      #timeLimiterAspectOrder : 2


management:
  endpoints:
    web:
      exposure:
        include: refresh
  endpoint:
    health:
      show-details: always